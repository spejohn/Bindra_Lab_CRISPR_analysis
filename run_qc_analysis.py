#!/usr/bin/env python3
"""
Script to run QC analysis on CRISPR screen data.

This script benchmarks our analysis pipeline by comparing published CRISPR
screen results from labs with results regenerated by our pipeline using the
same raw data. This validation helps ensure the accuracy and reliability
of our analysis pipeline.
"""

import os
import argparse
import logging
from pathlib import Path

from core.logging_setup import setup_logging
from core.file_handling import ensure_output_dir
from qc.screening.screen_qa_qc import create_fill_QC_df

def parse_arguments():
    """Parse command line arguments."""
    parser = argparse.ArgumentParser(description="Run QC analysis on CRISPR screen data")
    
    parser.add_argument(
        "--input-dir", 
        type=str, 
        required=True,
        help="Directory containing DrugZ and MAGeCK analysis results"
    )
    
    parser.add_argument(
        "--output-dir", 
        type=str, 
        required=True,
        help="Directory to store QC results"
    )
    
    parser.add_argument(
        "--output-file", 
        type=str, 
        default="qc_metrics.csv",
        help="Name of the output file (default: qc_metrics.csv)"
    )
    
    parser.add_argument(
        "--overwrite", 
        action="store_true",
        help="Overwrite existing output files"
    )
    
    parser.add_argument(
        "--generate-graphs", 
        action="store_true",
        help="Generate comparison graphs"
    )
    
    parser.add_argument(
        "--log-level", 
        type=str, 
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="Set the logging level"
    )
    
    return parser.parse_args()

def main():
    """Main function to run QC analysis."""
    args = parse_arguments()
    
    # Setup logging
    setup_logging(level=args.log_level)
    logger = logging.getLogger(__name__)
    
    logger.info("Starting QC analysis")
    
    # Convert paths to Path objects
    input_dir = Path(args.input_dir)
    output_dir = Path(args.output_dir)
    
    # Ensure input directory exists
    if not input_dir.exists():
        logger.error(f"Input directory not found: {input_dir}")
        return 1
    
    # Ensure output directory exists
    ensure_output_dir(output_dir)
    
    try:
        # Run QC analysis
        logger.info(f"Analyzing files in: {input_dir}")
        qc_results = create_fill_QC_df(
            directory=input_dir,
            output_dir=output_dir,
            filename=args.output_file,
            overwrite=args.overwrite,
            graph=args.generate_graphs
        )
        
        # Print summary
        logger.info(f"QC analysis complete. Results saved to: {output_dir / args.output_file}")
        logger.info(f"Analyzed {len(qc_results)} screen comparisons")
        
        return 0
    
    except Exception as e:
        logger.exception(f"Error during QC analysis: {e}")
        return 1

if __name__ == "__main__":
    exit(main()) 