#!/usr/bin/env python3
"""
Generate summary reports for CRISPR screen analyses.

This module creates HTML summary reports for analyzed screens, compiling
information about all analyses performed and their results.
"""

import os
import argparse
import logging
import sys
import pandas as pd
import glob
from pathlib import Path
from datetime import datetime
import jinja2

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

# HTML template for summary report
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>CRISPR Analysis Summary Report</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
        }
        h1, h2, h3 {
            color: #2c3e50;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .success {
            color: green;
        }
        .error {
            color: red;
        }
        .warning {
            color: orange;
        }
        .footer {
            margin-top: 40px;
            font-size: 0.9em;
            color: #7f8c8d;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>CRISPR Analysis Summary Report</h1>
        <p>Report generated on {{ date }}</p>
        
        <h2>Overview</h2>
        <p>Total screens analyzed: {{ screens|length }}</p>
        
        <h2>Screen Summary</h2>
        <table>
            <tr>
                <th>Screen</th>
                <th>Count Files</th>
                <th>MAGeCK RRA</th>
                <th>MAGeCK MLE</th>
                <th>DrugZ</th>
                <th>QC Report</th>
            </tr>
            {% for screen in screens %}
            <tr>
                <td>{{ screen.name }}</td>
                <td class="{{ 'success' if screen.count_files else 'error' }}">
                    {{ 'Yes' if screen.count_files else 'No' }}
                </td>
                <td class="{{ 'success' if screen.rra_analysis else 'warning' }}">
                    {{ 'Yes' if screen.rra_analysis else 'No' }}
                </td>
                <td class="{{ 'success' if screen.mle_analysis else 'warning' }}">
                    {{ 'Yes' if screen.mle_analysis else 'No' }}
                </td>
                <td class="{{ 'success' if screen.drugz_analysis else 'warning' }}">
                    {{ 'Yes' if screen.drugz_analysis else 'No' }}
                </td>
                <td class="{{ 'success' if screen.qc_report else 'warning' }}">
                    {% if screen.qc_report %}
                    <a href="{{ screen.qc_report_path }}">View QC Report</a>
                    {% else %}
                    No
                    {% endif %}
                </td>
            </tr>
            {% endfor %}
        </table>
        
        <h2>Top Hits Summary</h2>
        {% if top_hits %}
        <p>Top hits across all screens:</p>
        <table>
            <tr>
                <th>Screen</th>
                <th>Analysis</th>
                <th>Gene</th>
                <th>Score</th>
                <th>FDR</th>
            </tr>
            {% for hit in top_hits %}
            <tr>
                <td>{{ hit.screen }}</td>
                <td>{{ hit.analysis }}</td>
                <td>{{ hit.gene }}</td>
                <td>{{ hit.score }}</td>
                <td>{{ hit.fdr }}</td>
            </tr>
            {% endfor %}
        </table>
        {% else %}
        <p>No hits found.</p>
        {% endif %}
        
        <div class="footer">
            <p>Generated by CRISPR Analysis Pipeline</p>
        </div>
    </div>
</body>
</html>
"""

def check_screen_results(output_dir, screen):
    """
    Check which analyses were performed for a given screen.
    
    Args:
        output_dir: Base output directory
        screen: Screen name
        
    Returns:
        Dictionary with analysis status
    """
    screen_dir = os.path.join(output_dir, screen)
    
    # Initialize result dictionary
    result = {
        "name": screen,
        "count_files": False,
        "rra_analysis": False,
        "mle_analysis": False,
        "drugz_analysis": False,
        "qc_report": False,
        "qc_report_path": None
    }
    
    # Check for count files
    count_dir = os.path.join(screen_dir, "counts")
    if os.path.exists(count_dir):
        count_files = glob.glob(os.path.join(count_dir, "*.txt"))
        result["count_files"] = len(count_files) > 0
    
    # Check for RRA analysis
    rra_dir = os.path.join(screen_dir, "RRA")
    if os.path.exists(rra_dir):
        rra_files = glob.glob(os.path.join(rra_dir, "*.gene_summary.txt"))
        result["rra_analysis"] = len(rra_files) > 0
    
    # Check for MLE analysis
    mle_dir = os.path.join(screen_dir, "MLE")
    if os.path.exists(mle_dir):
        mle_files = glob.glob(os.path.join(mle_dir, "*.gene_summary.txt"))
        result["mle_analysis"] = len(mle_files) > 0
    
    # Check for DrugZ analysis
    drugz_dir = os.path.join(screen_dir, "drugz")
    if os.path.exists(drugz_dir):
        drugz_files = glob.glob(os.path.join(drugz_dir, "*_drugz_results.txt"))
        result["drugz_analysis"] = len(drugz_files) > 0
    
    # Check for QC report
    qc_dir = os.path.join(screen_dir, "qc")
    if os.path.exists(qc_dir):
        qc_reports = glob.glob(os.path.join(qc_dir, "*_qc_report.html"))
        if qc_reports:
            result["qc_report"] = True
            result["qc_report_path"] = os.path.relpath(qc_reports[0], output_dir)
    
    return result

def get_top_hits(output_dir, screens, max_hits=5):
    """
    Find top hits across all screens.
    
    Args:
        output_dir: Base output directory
        screens: List of screen names
        max_hits: Maximum number of hits to include per analysis
        
    Returns:
        List of dictionaries with hit information
    """
    top_hits = []
    
    # Process each screen
    for screen in screens:
        screen_dir = os.path.join(output_dir, screen)
        
        # Check RRA results
        rra_dir = os.path.join(screen_dir, "RRA")
        if os.path.exists(rra_dir):
            rra_files = glob.glob(os.path.join(rra_dir, "*.gene_summary.txt"))
            for rra_file in rra_files:
                try:
                    df = pd.read_csv(rra_file, sep="\t")
                    
                    # Process negative selection (more negative score is better)
                    if "neg|score" in df.columns and "neg|fdr" in df.columns:
                        neg_hits = df.sort_values("neg|score").head(max_hits)
                        for _, row in neg_hits.iterrows():
                            top_hits.append({
                                "screen": screen,
                                "analysis": "MAGeCK RRA (neg)",
                                "gene": row.get("id", "Unknown"),
                                "score": f"{row.get('neg|score', 0):.4f}",
                                "fdr": f"{row.get('neg|fdr', 1):.4f}"
                            })
                    
                    # Process positive selection (more positive score is better)
                    if "pos|score" in df.columns and "pos|fdr" in df.columns:
                        pos_hits = df.sort_values("pos|score", ascending=False).head(max_hits)
                        for _, row in pos_hits.iterrows():
                            top_hits.append({
                                "screen": screen,
                                "analysis": "MAGeCK RRA (pos)",
                                "gene": row.get("id", "Unknown"),
                                "score": f"{row.get('pos|score', 0):.4f}",
                                "fdr": f"{row.get('pos|fdr', 1):.4f}"
                            })
                except Exception as e:
                    logging.warning(f"Could not process RRA file {rra_file}: {e}")
        
        # Check MLE results
        mle_dir = os.path.join(screen_dir, "MLE")
        if os.path.exists(mle_dir):
            mle_files = glob.glob(os.path.join(mle_dir, "*.gene_summary.txt"))
            for mle_file in mle_files:
                try:
                    df = pd.read_csv(mle_file, sep="\t")
                    
                    # Get all beta columns
                    beta_cols = [col for col in df.columns if col.endswith("|beta")]
                    
                    # Process each beta column
                    for beta_col in beta_cols:
                        condition = beta_col.split("|")[0]
                        # Get top hits (largest magnitude)
                        df['abs_beta'] = df[beta_col].abs()
                        top_beta = df.sort_values("abs_beta", ascending=False).head(max_hits)
                        for _, row in top_beta.iterrows():
                            top_hits.append({
                                "screen": screen,
                                "analysis": f"MAGeCK MLE ({condition})",
                                "gene": row.get("Gene", "Unknown"),
                                "score": f"{row.get(beta_col, 0):.4f}",
                                "fdr": f"{row.get(beta_col.replace('beta', 'p-value'), 1):.4f}"
                            })
                        df.drop(columns=['abs_beta'], inplace=True)
                except Exception as e:
                    logging.warning(f"Could not process MLE file {mle_file}: {e}")
        
        # Check DrugZ results
        drugz_dir = os.path.join(screen_dir, "drugz")
        if os.path.exists(drugz_dir):
            drugz_files = glob.glob(os.path.join(drugz_dir, "*_drugz_results.txt"))
            for drugz_file in drugz_files:
                try:
                    df = pd.read_csv(drugz_file, sep="\t")
                    
                    # Get top DrugZ hits
                    if "normZ" in df.columns and "FDR" in df.columns:
                        # Top positive scores
                        pos_hits = df.sort_values("normZ", ascending=False).head(max_hits)
                        for _, row in pos_hits.iterrows():
                            top_hits.append({
                                "screen": screen,
                                "analysis": "DrugZ (pos)",
                                "gene": row.get("GENE", "Unknown"),
                                "score": f"{row.get('normZ', 0):.4f}",
                                "fdr": f"{row.get('FDR', 1):.4f}"
                            })
                        
                        # Top negative scores
                        neg_hits = df.sort_values("normZ").head(max_hits)
                        for _, row in neg_hits.iterrows():
                            top_hits.append({
                                "screen": screen,
                                "analysis": "DrugZ (neg)",
                                "gene": row.get("GENE", "Unknown"),
                                "score": f"{row.get('normZ', 0):.4f}",
                                "fdr": f"{row.get('FDR', 1):.4f}"
                            })
                except Exception as e:
                    logging.warning(f"Could not process DrugZ file {drugz_file}: {e}")
    
    return top_hits

def generate_report(output_dir, screens, output_file):
    """
    Generate an HTML summary report of all screens.
    
    Args:
        output_dir: Base output directory
        screens: List of screen names
        output_file: Path to output HTML file
        
    Returns:
        Path to generated report
    """
    # Check results for each screen
    screen_results = [check_screen_results(output_dir, screen) for screen in screens]
    
    # Get top hits
    top_hits = get_top_hits(output_dir, screens)
    
    # Generate HTML report
    template = jinja2.Template(HTML_TEMPLATE)
    html = template.render(
        date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        screens=screen_results,
        top_hits=top_hits
    )
    
    # Write HTML report
    with open(output_file, "w") as f:
        f.write(html)
    
    logging.info(f"Generated summary report: {output_file}")
    return output_file

def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(description="Generate CRISPR analysis summary report")
    
    parser.add_argument("--output-dir", required=True, help="Base output directory")
    parser.add_argument("--screens", nargs="+", help="List of screen names")
    parser.add_argument("--output-file", default="summary_report.html", help="Output HTML file")
    
    args = parser.parse_args()
    
    # Verify output directory exists
    if not os.path.exists(args.output_dir):
        logging.error(f"Output directory {args.output_dir} does not exist")
        return 1
    
    # If screens not provided, detect them from output directory
    screens = args.screens
    if not screens:
        screens = [d for d in os.listdir(args.output_dir) 
                  if os.path.isdir(os.path.join(args.output_dir, d))]
    
    # Generate report
    generate_report(args.output_dir, screens, args.output_file)
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 